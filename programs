1 Factorial
import java.util.Scanner;
public class FactorialIterative {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number to find its factorial: ");
        int num = scanner.nextInt();
        scanner.close();
        long factorial = 1;
        for (int i = 1; i <= num; i++) {
            factorial *= i;
        }
        System.out.println("Factorial of " + num + " = " + factorial);
    }
}


2 COUNT OF VOWELS
import java.util.Scanner;

public class CountVowels {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        scanner.close();
        
        int vowelsCount = countVowels(input);
        
        System.out.println("Number of vowels in the string: " + vowelsCount);
}
                                                                                                     
    public static int countVowels(String str) {
        int count = 0;
        str = str.toLowerCase(); 
        
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                count++;
            }
        }
        
        return count;
    } 
}

3 REVERSED STRING

import java.util.Scanner;

public class ReverseString {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string to reverse: ");
        String input = scanner.nextLine();
        scanner.close();
        
        String reversedString = reverseUsingStringBuilder(input);
        
        System.out.println("Reversed string: " + reversedString);
    }
    
    public static String reverseUsingStringBuilder(String str) {
        StringBuilder sb = new StringBuilder(str);
        return sb.reverse().toString();
    }
}

4 ALPHABETICALLY REVERSE
  import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ReverseAlphabetical {
    public static void main(String[] args) {
        List<String> fruits = new ArrayList<>();
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Orange");
        fruits.add("Pineapple");
        fruits.add("Grapes");
        Collections.sort(fruits, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return o2.compareTo(o1);
            }
        });
        System.out.println("Fruits sorted in reverse alphabetical order:");
        for (String fruit : fruits) {
            System.out.println(fruit);
        }
    }
}

5 HALLOW SQUARE PATTERN
  public class HollowSquarePattern {
    public static void main(String[] args) {
        int rows = 5; 
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= rows; j++) {
                if (i == 1 || i == rows || j == 1 || j == rows) {
                    System.out.print("*");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
6 NUMBER PATTERN
public class NumberPattern {
    public static void main(String[] args) {
        int rows = 4; 
       
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
7	Write a program to print the below pattern
1
2  2
3  3  3    
4  4   4   4
public class NumberPattern {
    public static void main(String[] args) {
        int rows = 4; 

        for (int i = 1; i <= rows; i++) {
            // Print the number 'i' for 'i' times
            for (int j = 1; j <= i; j++) {
                System.out.print(i + "  "); 
            }
            System.out.println();
        }
    }
}
8 MATRIX ADDITION
import java.util.Scanner;

public class MatrixAddition3x3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] matrixA = new int[3][3];
        int[][] matrixB = new int[3][3];
        int[][] sumMatrix = new int[3][3];
        System.out.println("Enter elements of the first 3x3 matrix:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrixA[i][j] = scanner.nextInt();
            }
        }
        System.out.println("Enter elements of the second 3x3 matrix:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrixB[i][j] = scanner.nextInt();
            }
        }
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                sumMatrix[i][j] = matrixA[i][j] + matrixB[i][j];
            }
        }
        System.out.println("Resulting matrix after addition:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(sumMatrix[i][j] + " ");
            }
            System.out.println();
        }

        scanner.close();
    }
}
9 REMOVE VOWELS FROM A STRING
import java.util.Scanner;

public class RemoveVowels {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        String result = removeVowels(input);
        System.out.println("String after removing vowels: " + result);

        scanner.close();
    }
    public static String removeVowels(String str) {
        return str.replaceAll("[AEIOUaeiou]", ""); // Remove both uppercase and lowercase vowels
    }
}
10 RIGHT TRIANGLE STAR PATTERN
import java.util.Scanner;

public class RightTriangleStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the height of the triangle: ");
        int height = scanner.nextInt();
        for (int i = 1; i <= height; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }

        scanner.close();
    }
}
11 INVERTED FULL PYRAMID PATTERN
import java.util.Scanner;
public class InvertedFullPyramid {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the height of the inverted pyramid: ");
        int height = scanner.nextInt();
        for (int i = height; i >= 1; i--) {
            for (int j = height; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }

        scanner.close();
    }
}
12 Write a program to print the below pattern
1
4     9
16   25    36
49   64    81    100
public class PerfectSquarePattern {
    public static void main(String[] args) {
        int rows = 4; 
        int number = 1; 

        for (int i = 1; i <= rows; i++) {
           
            for (int j = 1; j <= i; j++) {
                System.out.print((number * number) + "\t");
                number++; 
            }
            System.out.println();
        }
    }
}
13 Write a program to print the below pattern
1
2 2
3  3  3    
4  4   4   4
3  3  3
2  2
1
public class DiamondNumberPattern {
    public static void main(String[] args) {
        int n = 4;

        // Upper part of the pattern
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + "  "); 
            }
            System.out.println(); 
        }

        // Lower part of the pattern
        for (int i = n - 1; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + "  "); 
            }
            System.out.println(); 
        }
    }
}
14 Write a program to print hollow Square Dollar pattern?
import java.util.Scanner;

public class HollowSquareDollarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt the user for the size of the square
        System.out.print("Enter the size of the hollow square: ");
        int size = scanner.nextInt();

        // Loop to print the hollow square pattern
        for (int i = 1; i <= size; i++) {
            for (int j = 1; j <= size; j++) {
                // Print dollar signs on the borders, and space inside
                if (i == 1 || i == size || j == 1 || j == size) {
                    System.out.print("$ ");
                } else {
                    System.out.print("  "); // Print space for hollow part
                }
            }
            // Move to the next line after printing each row
            System.out.println();
        }

        scanner.close();
    }
}
15. Write a program to print inverted pyramid pattern.
Input: no of rows: 3
Output 
    ***
     *
      *
import java.util.Scanner;

public class InvertedPyramidPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt the user for the number of rows
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();

        // Loop to print the inverted pyramid pattern
        for (int i = rows; i >= 1; i--) {
            // Print leading spaces
            for (int j = 1; j <= rows - i; j++) {
                System.out.print(" ");
            }
            // Print stars for the current row
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            // Move to the next line after printing each row
            System.out.println();
        }

        scanner.close();
    }
}

SINGLE INHERITANCE
class Vehicle {
    void sound() {
        System.out.println("vehicle sound");
    }
}
class mustang extends Vehicle {
    void sound() {
        System.out.println("Vroom Vroom");
    }
}
class bmw extends Vehicle{
    void sound() {
        System.out.println("vroooommmm vrooooommmmm");
    }
}
public class InheritanceExample {
    public static void main(String[] args) {
        Vehicle mymustang = new mustang(); 
        Vehicle mybmw = new bmw(); 
        mymustang.sound(); 
        
        mybmw.sound();
    }
} 

6. Right Triangle Star Pattern
java
Copy code
import java.util.Scanner;

public class RightTriangleStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int n = scanner.nextInt();
        
        for (int i = 1; i <= n; i++) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= i; k++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
17. Pascal's Triangle Pattern
java
Copy code
import java.util.Scanner;

public class PascalsTriangle {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int n = scanner.nextInt();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            int num = 1;
            for (int j = 0; j <= i; j++) {
                System.out.print(num + " ");
                num = num * (i - j) / (j + 1);
            }
            System.out.println();
        }
    }
}
18. Rectangle Symbol Pattern
java
Copy code
import java.util.Scanner;

public class RectanglePattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the symbol: ");
        char symbol = scanner.next().charAt(0);

        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();

        System.out.print("Enter the number of columns: ");
        int columns = scanner.nextInt();

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(symbol + " ");
            }
            System.out.println();
        }
    }
}
19. Print the given pattern
java
Copy code
import java.util.Scanner;

public class PrintPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number to be printed: ");
        int num = scanner.nextInt();
        System.out.print("Max number of times printed: ");
        int max = scanner.nextInt();

        for (int i = 1; i <= max; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print(num);
            }
            System.out.println();
        }
        for (int i = max - 1; i >= 1; i--) {
            for (int j = 0; j < i; j++) {
                System.out.print(num);
            }
            System.out.println();
        }
    }
}
20. Inverted Full Pyramid Pattern
java
Copy code
import java.util.Scanner;

public class InvertedFullPyramid {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int n = scanner.nextInt();

        for (int i = n; i >= 1; i--) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
21. Print the given character pattern

import java.util.Scanner;

public class CharacterPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the character to be printed: ");
        char ch = scanner.next().charAt(0);
        System.out.print("Max number of times printed: ");
        int max = scanner.nextInt();

        for (int i = 1; i <= max; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print(ch + " ");
            }
            System.out.println();
        }
    }
}


2. Program to print hollow square symbol pattern:

import java.util.Scanner;

public class HollowSquare {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the size of the square: ");
        int size = scanner.nextInt();

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (i == 0 || i == size - 1 || j == 0 || j == size - 1) {
                    System.out.print("* ");
                } else {
                    System.out.print("  ");
                }
            }
            System.out.println();
        }
    }
}
23. Program to print the below pattern:

public class NumberPattern {
    public static void main(String[] args) {
        for (int i = 1; i <= 4; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
24. Program to print the below pattern:

public class SquarePattern {
    public static void main(String[] args) {
        for (int i = 1; i <= 4; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print((i * i) + (j - 1) * (2 * i - 1) + " ");
            }
            System.out.println();
        }
    }
}
25. Program to print the below pattern:

public class PyramidPattern {
    public static void main(String[] args) {
        for (int i = 1; i <= 4; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
        for (int i = 3; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
26. Program to print hollow square dollar pattern:

import java.util.Scanner;

public class HollowDollarSquare {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the size of the square: ");
        int size = scanner.nextInt();

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (i == 0 || i == size - 1 || j == 0 || j == size - 1) {
                    System.out.print("$ ");
                } else {
                    System.out.print("  ");
                }
            }
            System.out.println();
        }
    }
}
27. Program to print inverted pyramid pattern:


import java.util.Scanner;

public class InvertedPyramid {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();

        for (int i = rows; i >= 1; i--) {
            for (int j = 1; j <= rows - i; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
28. Program to reverse a number using loop:


import java.util.Scanner;

public class ReverseNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        int reverse = 0;

        while (number != 0) {
            int digit = number % 10;
            reverse = reverse * 10 + digit;
            number /= 10;
        }
        System.out.println("Reverse Number: " + reverse);
    }
}
29. Program to convert decimal to binary and print the reverse:

import java.util.Scanner;

public class DecimalToBinaryReverse {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a decimal number: ");
        int number = scanner.nextInt();
        String binary = Integer.toBinaryString(number);
        String reversedBinary = new StringBuilder(binary).reverse().toString();
        int reversedNumber = Integer.parseInt(reversedBinary, 2);
        System.out.println("Reversed binary to decimal: " + reversedNumber);
    }
}
30. Program to check voting eligibility:

import java.util.Scanner;

public class VotingEligibility {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter your age: ");
        int age = scanner.nextInt();

        if (age >= 18) {
            System.out.println("You are eligible to vote.");
        } else {
            System.out.println("You are allowed to vote after " + (18 - age) + " years.");
        }
    }
}
31. Program to find the LCM and GCD of n numbers:

import java.util.Scanner;

public class LCMAndGCD {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();
        int[] numbers = new int[n];

        for (int i = 0; i < n; i++) {
            System.out.print("Enter number " + (i + 1) + ": ");
            numbers[i] = scanner.nextInt();
        }

        int gcd = numbers[0];
        int lcm = numbers[0];

        for (int i = 1; i < n; i++) {
            gcd = findGCD(gcd, numbers[i]);
            lcm = findLCM(lcm, numbers[i], gcd);
        }

        System.out.println("GCD: " + gcd);
        System.out.println("LCM: " + lcm);
    }

    public static int findGCD(int a, int b) {
        if (b == 0) {
            return a;
        }
        return findGCD(b, a % b);
    }

    public static int findLCM(int a, int b, int gcd) {
        return (a * b) / gcd;
    }
}
32. Program to calculate simple interest:

import java.util.Scanner;

public class SimpleInterest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the principal amount: ");
        double principal = scanner.nextDouble();
        System.out.print("Enter the number of years: ");
        int years = scanner.nextInt();
        System.out.print("Is the customer a senior citizen (y/n): ");
        char isSenior = scanner.next().charAt(0);

        double rateOfInterest = (isSenior == 'y' || isSenior == 'Y') ? 12 : 10;
        double interest = (principal * years * rateOfInterest) / 100;
        System.out.println("Interest: " + interest);
    }
}
33. Program to print the Fibonacci series:

import java.util.Scanner;

public class FibonacciSeries {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the n value: ");
        int n = scanner.nextInt();
        int a = 0, b = 1;

        System.out.print(a + " " + b + " ");
        for (int i = 2; i < n; i++) {
            int next = a + b;
            System.out.print(next + " ");
            a = b;
            b = next;
        }
    }
}
34. Program to find even sum of Fibonacci series till number N:

import java.util.Scanner;

public class EvenSumFibonacci {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the n value: ");
        int n = scanner.nextInt();
        int a = 0, b = 1, sum = 0;

        for (int i = 0; i <= 2 * n; i++) {
            if (i % 2 == 0) {
                sum += a;
            }
            int next = a + b;
            a = b;
            b = next;
        }
        System.out.println("Even sum of Fibonacci series till " + n + " is: " + sum);
    }
}
35. Program to print numbers from M to N by skipping K numbers:

import java.util.Scanner;

public class SkipNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the start number (M): ");
        int M = scanner.nextInt();
        System.out.print("Enter the end number (N): ");
        int N = scanner.nextInt();
        System.out.print("Enter the number to skip (K): ");
        int K = scanner.nextInt();

        for (int i = M; i <= N; i += K) {
            System.out.print(i + " ");
        }
    }
}
36. Program to print all composite numbers between a and b:

import java.util.Scanner;

public class CompositeNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the start number (A): ");
        int A = scanner.nextInt();
        System.out.print("Enter the end number (B): ");
        int B = scanner.nextInt();

        for (int i = Math.min(A, B); i <= Math.max(A, B); i++) {
            if (i > 1 && !isPrime(i)) {
                System.out.print(i + " ");
            }
        }
    }

    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}
37. Program to find the factorial of n:

import java.util.Scanner;

public class Factorial {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number (N): ");
        int N = scanner.nextInt();

        if (N < 0) {
            System.out.println("Factorial not defined for negative numbers");
        } else {
            int factorial = 1;
            for (int i = 1; i <= N; i++) {
                factorial *= i;
            }
            System.out.println(N + " Factorial = " + factorial);
        }
    }
}
38. Program to find whether the year of the given date is a leap year or not:

import java.util.Scanner;

public class LeapYear {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Date (dd/mm/yyyy): ");
        String date = scanner.nextLine();

        String[] parts = date.split("/");
        int year = Integer.parseInt(parts[2]);

        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            System.out.println("Given year is a Leap Year");
        } else {
            System.out.println("Given year is a Non Leap Year");
        }
    }
}
39. Program to find the number of factors for a given number:

import java.util.Scanner;

public class NumberOfFactors {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (number <= 0) {
            System.out.println("Number of factors not defined for non-positive numbers");
            return;
        }

        int count = 0;
        for (int i = 1; i <= number; i++) {
            if (number % i == 0) {
                count++;
            }
        }
        System.out.println("Number of factors: " + count);
    }
}
40. Program to check if a given number is a perfect number:

import java.util.Scanner;

public class PerfectNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (number <= 0) {
            System.out.println("Number is not a perfect number");
            return;
        }

        int sum = 0;
        for (int i = 1; i <= number / 2; i++) {
            if (number % i == 0) {
                sum += i;
            }
        }

        if (sum == number) {
            System.out.println("It's a Perfect Number");
        } else {
            System.out.println("It's not a Perfect Number");
        }
    }
}
41. Program to find the square and cube of a given decimal number:

import java.util.Scanner;

public class SquareAndCube {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        double number = scanner.nextDouble();

        double square = number * number;
        double cube = number * number * number;

        System.out.println("Square Number: " + square);
        System.out.println("Cube Number: " + cube);
    }
}
42. Program to find the nth odd number after n odd numbers:

import java.util.Scanner;

public class NthOddNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the N value: ");
        int n = scanner.nextInt();

        if (n <= 0) {
            System.out.println("Invalid input, N should be positive.");
            return;
        }

        int count = 0;
        for (int i = 1; count < n; i += 2) {
            if (count < n) {
                System.out.print(i + " ");
                count++;
            }
        }
    }
}
43. Program to check if a number is an Armstrong number:

import java.util.Scanner;

public class ArmstrongNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        int originalNumber = number;
        int result = 0;
        int n = 0;

        while (originalNumber != 0) {
            originalNumber /= 10;
            ++n;
        }

        originalNumber = number;

        while (originalNumber != 0) {
            int remainder = originalNumber % 10;
            result += Math.pow(remainder, n);
            originalNumber /= 10;
        }

        if (result == number) {
            System.out.println("Given number is Armstrong number");
        } else {
            System.out.println("Given number is not Armstrong number");
        }
    }
}
44. Program to find the sum of digits of an N-digit number (sum should be single digit):
import java.util.Scanner;

public class SumOfDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of digits (N): ");
        int N = scanner.nextInt();
        System.out.print("Enter the " + N + " digit number: ");
        int number = scanner.nextInt();
        int sum = 0;

        while (number != 0) {
            sum += number % 10;
            number /= 10;
        }

        while (sum >= 10) {
            int temp = sum;
            sum = 0;
            while (temp != 0) {
                sum += temp % 10;
                temp /= 10;
            }
        }

        System.out.println("Single digit sum: " + sum);
    }
}
45. Program to find the square root of a perfect square number:
import java.util.Scanner;

public class SquareRoot {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (number < 0) {
            System.out.println("Square root not defined for negative numbers");
            return;
        }

        double sqrt = Math.sqrt(number);
        if (sqrt == (int) sqrt) {
            System.out.println("Square Root: " + (int)sqrt + ", -" + (int)sqrt);
        } else {
            System.out.println("Number is not a perfect square");
        }
    }
}
46. Program to check if a number is a power of three:
import java.util.Scanner;

public class PowerOfThree {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();

        if (isPowerOfThree(number)) {
            System.out.println("True");
        } else {
            System.out.println("False");
        }
    }

    public static boolean isPowerOfThree(int number) {
        if (number < 1) {
            return false;
        }

        while (number % 3 == 0) {
            number /= 3;
        }
        return number == 1;
    }
}
47. Program to find the most frequent word that is not banned:

import java.util.*;

public class MostFrequentWord {
    public static void main(String[] args) {
        String paragraph = "Ram hit a ball, the hit ball flew far after it was hit";
        String[] banned = {"hit"};
        
        System.out.println(mostCommonWord(paragraph, banned));
    }

    public static String mostCommonWord(String paragraph, String[] banned) {
        Set<String> bannedSet = new HashSet<>(Arrays.asList(banned));
        Map<String, Integer> wordCount = new HashMap<>();

        String[] words = paragraph.replaceAll("[^a-zA-Z ]", "").toLowerCase().split("\\s+");
        for (String word : words) {
            if (!bannedSet.contains(word)) {
                wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
            }
EXCEPTIONAL HANDLING 
import java.util.Scanner;

public class ExceptionHandlingExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter a number to divide 100 by: ");
        
        try {
            String input = scanner.nextLine();
            int number = Integer.parseInt(input); 
            
            int result = 100 / number; 
            System.out.println("Result: 100 / " + number + " = " + result);
            
        } catch (ArithmeticException e) {
            System.out.println("Error: Cannot divide by zero.");
        } catch (NumberFormatException e) {
            System.out.println("Error: Invalid input. Please enter a valid integer.");
        } catch (Exception e) {
            System.out.println("An unexpected error occurred: " + e.getMessage());
        } finally {
            System.out.println("Thank you for using the program!");
            scanner.close();
        }
    }
}
2. public class ExceptionHandlingExample {

    public static void main(String[] args) {
        try {
            int result = divide(10, 0); 
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Exception caught: Division by zero is not allowed.");
        } finally {
            System.out.println("Finally block always executes.");
        }

        System.out.println("Program continues after exception handling.");
    }
    public static int divide(int a, int b) {
        return a / b;
    }
}
 Division by Zero
public class DivisionExample {
    public static void main(String[] args) {
        try {
            int result = divide(10, 0); // This will cause an ArithmeticException
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero is not allowed.");
        }
    }

    public static int divide(int a, int b) {
        return a / b;
    }
}
2. Array Index Out of Bounds
public class ArrayExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3};

        try {
            System.out.println("Accessing element: " + numbers[5]); // This will cause ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Index is out of bounds.");
        }
    }
}
3. Null Pointer Exception
public class NullPointerExample {
    public static void main(String[] args) {
        String str = null;

        try {
            System.out.println("Length of string: " + str.length()); // This will cause NullPointerException
        } catch (NullPointerException e) {
            System.out.println("Error: Cannot get the length of a null string.");
        }
    }
}

