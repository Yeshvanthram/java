1. Program 1: Interface for Animal

java
interface Animal {
    void eat();
    void sleep();
}

class Dog implements Animal {
    public void eat() {
        System.out.println("Dog is eating");
    }
    public void sleep() {
        System.out.println("Dog is sleeping");
    }
}

public class AnimalInterface {
    public static void main(String[] args) {
        Dog myDog = new Dog();
        myDog.eat();
        myDog.sleep();
    }
}


2. Program 2: Interface for Shape

java
interface Shape {
    void draw();
}

class Circle implements Shape {
    public void draw() {
        System.out.println("Circle is drawn");
    }
}

public class ShapeInterface {
    public static void main(String[] args) {
        Circle myCircle = new Circle();
        myCircle.draw();
    }
}


3. Program 3: Interface for Vehicle

java
interface Vehicle {
    void start();
    void stop();
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car is starting");
    }
    public void stop() {
        System.out.println("Car is stopping");
    }
}

public class VehicleInterface {
    public static void main(String[] args) {
        Car myCar = new Car();
        myCar.start();
        myCar.stop();
    }
}
TEST 18-07-2024
Program 1: Handling Arithmetic Exception
java
public class ArithmeticExceptionExample {
    public static void main(String[] args) {
        try {
            int result = 10 / 0;
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero is not allowed");
        }
    }
}
Program 2: Handling ArrayIndexOutOfBoundsException
java
public class ArrayExceptionExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3};
        try {
            System.out.println("Element at index 3: " + numbers[3]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Index out of bounds");
        }
    }
}
Program 3: Custom Exception Example
java
class CustomException extends Exception {
    public CustomException(String message) {
        super(message);
    }
}

public class CustomExceptionExample {
    public static void main(String[] args) {
        try {
            throw new CustomException("Custom Exception occurred");
        } catch (CustomException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
TEST 5 22/07/24
1, 
import java.util.Scanner;

public class DaysConverter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of days: ");
        int days = scanner.nextInt();
        int years = days / 365;
        int weeks = (days % 365) / 7;
        int remainingDays = days - (years * 365 + weeks * 7);
        System.out.println("No. of years: " + years);
        System.out.println("No. of weeks: " + weeks);
        System.out.println("No. of days: " + remainingDays);
        
        scanner.close();
    }
}
2.
import java.util.HashSet;
import java.util.Set;
public class UniquePermutations {
    public static void main(String[] args) {
        String number = "122";
        Set<String> uniquePermutations = new HashSet<>();
        generatePermutations(number.toCharArray(), 0, uniquePermutations);
        System.out.println("Unique permutations of " + number + ":");
        for (String permutation : uniquePermutations) {
            System.out.println(permutation);
        }
    }
    public static void generatePermutations(char[] arr, int index, Set<String> set) {
        if (index == arr.length - 1) {
            set.add(new String(arr)); 
        } else {
            for (int i = index; i < arr.length; i++) {
                swap(arr, index, i);
                generatePermutations(arr, index + 1, set);
                swap(arr, index, i);
            }
        }
    }
    public static void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
3.
import java.util.Scanner;
public class Factors {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a positive integer: ");
        int number = scanner.nextInt();
        System.out.println("Number of factors of " + number + ": " + countFactors(number));
        scanner.close();
    }
    public static int countFactors(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                count++;
            }
        }
        return count;
    }
}

TEST 6
1

class BaseClass {
    public void area(int a, int b) {
        if (a == b) {
            int area = a * a;
            System.out.println("Area of the square: " + area);
        } else {
            System.out.println("For a square, both sides must be equal.");
        }
    }
}
class DerivedClass extends BaseClass {
    @Override
    public void area(int a, int b) {
        int area = a * b;
        System.out.println("Area of the rectangle: " + area);
    }
}
public class Main {
    public static void main(String[] args) {
        BaseClass base = new BaseClass();
        base.area(5, 5); 
        base.area(5, 10); 
        DerivedClass derived = new DerivedClass();
        derived.area(5, 10); 
    }
}
2
class MathOperations {
    
    public int sum(int a, int b) {
        return a + b;
    }
    
    public int sum(int a, int b, int c) {
        return a + b + c;
    }
    public double sum(double a, double b) {
        return a + b;
    }
    
    public int sum(int a, int b, int c, int d) {
        return a + b + c + d;
    }
    public int sum(int b, int a) {
        return a + b;
    }
    public void displaySum(int result) {
        System.out.println("Sum: " + result);
    }
}

public class Main {
    public static void main(String[] args) {
        MathOperations mathOps = new MathOperations();
        int result1 = mathOps.sum(5, 10);
        int result2 = mathOps.sum(5, 10, 15);
        mathOps.displaySum(result1);
        mathOps.displaySum(result2);
        double result3 = mathOps.sum(5.5, 10.2);
        int result4 = mathOps.sum(1, 2, 3, 4);
        mathOps.displaySum((int) result3);
        mathOps.displaySum(result4);
        int result5 = mathOps.sum(10, 5);
        mathOps.displaySum(result5);
    }
}






